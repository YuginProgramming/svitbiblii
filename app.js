import bot from "./botInstance.js";
import { getTotalChapters, getTableOfContents, getChapterText, getChapterPreview } from "./epub-parser/index.js";
import { mainMenu, setupMainMenuHandlers, formatTOC, splitMessage } from "./mainMenu.js";
import { setupNavigationHandlers } from "./navigation/index.js";
import { initializeTelegramUserMiddleware } from "./database/middleware/telegramUserMiddleware.js";


console.log('üöÄ Starting EPUB Bot...');

setupMainMenuHandlers(bot);

// Set up Menu Button (hamburger menu in bottom-left corner)
async function setupMenuButton() {
  try {
    await bot.setMyCommands([
      { command: 'start', description: 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º' },
      { command: 'help', description: '‚ùì –î–æ–ø–æ–º–æ–≥–∞ - –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º' },
      { command: 'toc', description: 'üìã –ó–º—ñ—Å—Ç - –ü–æ–∫–∞–∑–∞—Ç–∏ –∑–º—ñ—Å—Ç –∫–Ω–∏–≥–∏' },
      { command: 'first', description: 'üìñ –ü–µ—Ä—à–∏–π —Ä–æ–∑–¥—ñ–ª - –Ñ–≤–∞–Ω–≥–µ–ª—ñ—î –≤—ñ–¥ –ú–∞—Ç—Ñ–µ—è' }
    ]);
    console.log('‚úÖ Menu button commands set successfully');
  } catch (error) {
    console.log('‚ùå Failed to set menu button commands:', error.message);
  }
}

setupMenuButton();



// Start command
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  userChapterIndex[chatId] = 5; // Start with first actual chapter (Matthew Chapter 1)

  await getTotalChapters();

  await bot.sendMessage(chatId, "üëã –í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –Ω–∏–∂—á–µ:", mainMenu);

  await bot.sendMessage(chatId, "–©–æ–± –ø–æ—á–∞—Ç–∏ —á–∏—Ç–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω–∏:", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üìñ –Ñ–≤–∞–Ω–≥–µ–ª—ñ—î –≤—ñ–¥ –ú–∞—Ç—Ñ–µ—è - –†–æ–∑–¥—ñ–ª 1", callback_data: "chapter_5" }]
      ]
    }
  });
});

// Help command
bot.onText(/\/help/, async (msg) => {
  const chatId = msg.chat.id;
  
  const helpText = `üìö *–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:*

üè† *–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é* - –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
üìã *–ó–º—ñ—Å—Ç –∫–Ω–∏–≥–∏* - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–Ω–∏–≥–∏
üìñ *–ü–µ—Ä—à–∏–π —Ä–æ–∑–¥—ñ–ª* - –ø–æ—á–∞—Ç–∏ —á–∏—Ç–∞–Ω–Ω—è –∑ –Ñ–≤–∞–Ω–≥–µ–ª—ñ—è –≤—ñ–¥ –ú–∞—Ç—Ñ–µ—è

‚¨ÖÔ∏è‚û°Ô∏è *–ù–∞–≤—ñ–≥–∞—Ü—ñ—è* - –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –º—ñ–∂ —Ä–æ–∑–¥—ñ–ª–∞–º–∏
üìù *–¢–µ–∫—Å—Ç* - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–±–∏–≤–∞—î—Ç—å—Å—è –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ

*–ö–æ–º–∞–Ω–¥–∏:*
/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞
/toc - –ó–º—ñ—Å—Ç –∫–Ω–∏–≥–∏
/first - –ü–µ—Ä—à–∏–π —Ä–æ–∑–¥—ñ–ª

*–ü—Ä–∏—î–º–Ω–æ–≥–æ —á–∏—Ç–∞–Ω–Ω—è!* üìñ‚ú®`;
  
  await bot.sendMessage(chatId, helpText, { parse_mode: 'Markdown' });
});

// Table of Contents command
bot.onText(/\/toc/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const toc = await getTableOfContents();
    
    // Create inline buttons for main books only
    const bookButtons = [];
    let currentRow = [];
    
    toc.forEach((book, index) => {
      const buttonText = book.title;
      const callbackData = `book_${index}`;
      
      currentRow.push({ text: buttonText, callback_data: callbackData });
      
      // Create new row after every 2 buttons for better layout
      if (currentRow.length === 2) {
        bookButtons.push([...currentRow]);
        currentRow = [];
      }
    });
    
    // Add remaining buttons if any
    if (currentRow.length > 0) {
      bookButtons.push(currentRow);
    }

    await bot.sendMessage(chatId, "üìñ –û–±–µ—Ä—ñ—Ç—å –∫–Ω–∏–≥—É –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è:", {
      reply_markup: {
        inline_keyboard: bookButtons
      }
    });
  } catch (err) {
    await bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–º—ñ—Å—Ç –∫–Ω–∏–≥–∏.");
    console.error(err);
  }
});

// First chapter command
bot.onText(/\/first/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const preview = await getChapterPreview(5);
    const formattedMessage = `*${preview.title}*\n\n${preview.content}`;
    
    const actionButtons = [];
    if (preview.hasMore) {
      actionButtons.push({ text: "üìñ –ß–∏—Ç–∞—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é", callback_data: "full_5" });
    }
    actionButtons.push({ text: "üìã –ó–º—ñ—Å—Ç –∫–Ω–∏–≥–∏", callback_data: "back_to_toc" });
    actionButtons.push({ text: "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data: "main_menu" });

    await bot.sendMessage(chatId, formattedMessage, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [actionButtons]
      }
    });
  } catch (err) {
    await bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–µ—Ä—à–∏–π —Ä–æ–∑–¥—ñ–ª.");
    console.error(err);
  }
});

const userChapterIndex = {};

// Helper to send long text in chunks
async function sendInChunks(chatId, text, keyboard) {
  const maxLength = 4000;
  let parts = [];

  for (let i = 0; i < text.length; i += maxLength) {
    parts.push(text.slice(i, i + maxLength));
  }

  for (let i = 0; i < parts.length; i++) {
    const isLast = i === parts.length - 1;
    await bot.sendMessage(chatId, parts[i], {
      reply_markup: isLast && keyboard ? { inline_keyboard: keyboard } : undefined
    });
  }
}

// Register navigation handlers
setupNavigationHandlers(bot, userChapterIndex, sendInChunks);

// Initialize Telegram user tracking middleware
console.log('üîÑ Initializing Telegram User Middleware...');
initializeTelegramUserMiddleware(bot);
console.log('‚úÖ Telegram User Middleware initialized!');