import { getFirstChapterText, getTableOfContents } from "./epubParse.js";

const mainMenu = {
  reply_markup: {
    keyboard: [
      [{ text: "–ü—Ä–æ –∫–Ω–∏–≥—É" }, { text: "–ó–º—ñ—Å—Ç –∫–Ω–∏–≥–∏" }, { text: "–ü–µ—Ä—à–∏–π —Ä–æ–∑–¥—ñ–ª" }]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  }
};

function formatTOC(toc, indent = 0) {
  let message = "";
  toc.forEach((item) => {
    const prefix = "  ".repeat(indent);
    message += `${prefix}- ${item.title}\n`;
    if (item.subchapters && item.subchapters.length > 0) {
      message += formatTOC(item.subchapters, indent + 1);
    }
  });
  return message;
}

/**
 * Split long message into chunks <= 4000 chars
 */
function splitMessage(message, maxLength = 4000) {
  const parts = [];
  let start = 0;

  while (start < message.length) {
    let end = start + maxLength;

    // Try to split at last newline before maxLength
    if (end < message.length) {
      const lastNewline = message.lastIndexOf("\n", end);
      if (lastNewline > start) end = lastNewline + 1;
    }

    parts.push(message.slice(start, end));
    start = end;
  }

  return parts;
}

function setupMainMenuHandlers(bot) {
  bot.on("message", async (msg) => {
    const chatId = msg.chat.id;

    if (msg.text === "–ü—Ä–æ –∫–Ω–∏–≥—É") {
      await bot.sendMessage(
        chatId,
        "–¶–µ –∫–Ω–∏–≥–∞ –ù–æ–≤–æ–≥–æ –ó–∞–ø–æ–≤—ñ—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ EPUB.\n–í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –∑–º—ñ—Å—Ç —ñ —á–∏—Ç–∞—Ç–∏ —Ä–æ–∑–¥—ñ–ª–∏."
      );
    }

    if (msg.text === "–ó–º—ñ—Å—Ç –∫–Ω–∏–≥–∏") {
      try {
        const toc = await getTableOfContents();
        let tocMessage = "üìñ –ó–º—ñ—Å—Ç –∫–Ω–∏–≥–∏:\n\n" + formatTOC(toc);

        const messages = splitMessage(tocMessage);

        for (const part of messages) {
          await bot.sendMessage(chatId, part);
        }
      } catch (err) {
        await bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–º—ñ—Å—Ç –∫–Ω–∏–≥–∏.");
        console.error(err);
      }
    }

    if (msg.text === "–ü–µ—Ä—à–∏–π —Ä–æ–∑–¥—ñ–ª") {
      try {
        const firstChapter = await getFirstChapterText();
        const messages = splitMessage(`üìñ –ü–µ—Ä—à–∏–π —Ä–æ–∑–¥—ñ–ª:\n\n${firstChapter}`);

        for (const part of messages) {
          await bot.sendMessage(chatId, part);
        }
      } catch (err) {
        await bot.sendMessage(chatId, "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–µ—Ä—à–∏–π —Ä–æ–∑–¥—ñ–ª.");
        console.error(err);
      }
    }
  });
}

export { mainMenu, setupMainMenuHandlers };
